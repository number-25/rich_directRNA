/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    medgen/directrna Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                       = 'assets/samplesheet.csv'
    bam_input                   = null
    // References
    genome_fasta                = 'data/hg38.analysisSet.fa.gz'
    genome_fasta_index          = 'data/hg38.analysisSet.fa.fai'
    custom_genome               = false // only when providing novel genomes
    skip_prepare_reference      = false // even if paths are hardcoded, files need to be unzipped and so on
    // Hard-coding paths?
    genome_fasta_minimap2_index = null
    genome_fasta_samtools_index = null
    genome_fasta_sizes          = null
    transcriptome_fasta         = 'data/gencode.v46.transcripts.fa.gz'
    annotation_gtf              = 'data/Homo_sapiens.GRCh38.112.gtf.gz'
    skip_jaffal                 = false
    skip_jaffal_download        = false
    //sqanti params
    skip_sqanti_all             = false
    skip_sqanti_qc              = false
    sqanti_qc_download          = true
    sqanti_qc_reference         = 'human'
    sqanti_qc_cage              = true
    sqanti_qc_polyA_sites       = true
    sqanti_qc_polyA_motif       = true
    sqanti_qc_intron_junctions  = true
    //cage_bed                    = 'data/refTSS_v4.1_human_coordinate.hg38.bed.txt.gz'
    //polyA_bed                   = 'data/atlas.clusters.2.0.GRCh38.96_aliased.bed'
    //polyA_sites                 = 'data/mouse_and_human.polyA_motif.txt'
    //intropolis_bed              = 'data/intropolis.v1.hg19_with_liftover_to_hg38.tsv.min_count_10.modified.gz'
    //phylop_bed               = 'data/hg38.phyloP7way.bed'

    //igenomes
    igenomes_base               = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore             = true

    // MultiQC options
    //multiqc_config             = null
    //multiqc_title              = null
    //multiqc_logo               = null
    //max_multiqc_email_size     = '25.MB'
    //multiqc_methods_description = null

    // QC
    skip_qc                     = false
    // nanoq options            =
    // cramino options          =
    // alfred options           =

    // MINIMAP2
    skip_mapping                = false
    // minimap2 options         =

    // BEDGRAPH_TO_BIGWIG?

    // FLAIR
    skip_flair_correct           = true
    skip_flair_collapse          = false
    // skip_flair_quant             = true
    // flair_reconstruction         = false

    // READ CORRECTION
    // jaccard index

    // BAMBU
    skip_bambu                  = false

    // STRINGTIE2
    // skip_stringtie2          = true

    // ISOQUANT
    // skip_isoquant            = true
    // skip_isoquant_correction = true

    // TALON
    // skip_transcriptclean     = false
    // skip_talon               = false
    // skip_?

    // JAFFAL
    // skip_jaffal              = false

    // SQANTI
    // skip_sqanti_full         = false
    // skip_sqanti_qc           = false
    // skip_sqanti_filter       = false
    // skip_sqanti_recover      = false

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    version                      = false
    //pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    //custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    custom_config_base         = null
    config_profile_contact     = 'dean.basic@qimrberghofer.edu.au'
    config_profile_url         = 'wiki_link'

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
    includeConfig 'conf/base.config'


// Load nf-core custom profiles from different Institutions
//try {
//    includeConfig "${params.custom_config_base}/nfcore_custom.config"
//} catch (Exception e) {
//    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
//}

// Load medgen/directrna custom profiles from different institutions.
//try {
//    includeConfig "${params.custom_config_base}/pipeline/directrna.config"
//} catch (Exception e) {
//    System.err.println("WARNING: Could not load nf-core/config/directrna profiles: ${params.custom_config_base}/pipeline/directrna.config")
//}


profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-schema@2.0.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'medgen/directrna'
    author          = """Dean Bašić"""
    homePage        = 'https://github.com/number25/MedGen_dRNA'
    description     = """Analysis pipeline for ONT directRNA sequencing data"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=24.10.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
